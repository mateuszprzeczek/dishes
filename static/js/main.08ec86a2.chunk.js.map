{"version":3,"sources":["components/DishesForm/DishesForm.module.css","sendOrder.js","renderField.js","img/pizza.jpg","components/dish-types/Pizza.js","img/soup.jpg","components/dish-types/Soup.js","img/sandwich.jpg","components/dish-types/Sandwich.js","components/DropDown/renderDropDownField.js","validate.js","warn.js","components/DishesForm/DishesForm.js","store.js","index.js","components/DropDown/renderDropDown.module.css"],"names":["module","exports","sleep","ms","Promise","resolve","setTimeout","values","a","result","type","name","preparation_time","no_of_slices","parseInt","diameter","spiciness_scale","slices_of_bread","requestOptions","method","body","JSON","stringify","headers","fetch","res","json","data","window","alert","renderField","input","label","step","min","max","value","defaultValue","meta","touched","error","warning","placeholder","style","color","Pizza","Field","component","src","pizzaImg","alt","width","Soup","className","id","soupImg","Sandwich","sandwichImg","renderDropDownField","formValues","options","htmlFor","styles","select","map","option","validate","errors","length","username","slice","isNaN","Number","warn","DishesForm","props","handleSubmit","dishType","submitting","valid","onSubmit","form","disabled","button","success","animate","reduxForm","onSubmitSuccess","dispatch","reset","selector","formValueSelector","connect","state","reducer","combineReducers","reduxFormReducer","store","createStore","ReactDOM","render","sendOrder","document","getElementById"],"mappings":"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","file":"static/js/main.08ec86a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"invalid\":\"DishesForm_invalid__3WNon\",\"button\":\"DishesForm_button__f73gi\",\"animate\":\"DishesForm_animate__umwTR\",\"spin\":\"DishesForm_spin__3lQAV\",\"success\":\"DishesForm_success__2tffR\",\"error\":\"DishesForm_error__2seu8\",\"vibrate\":\"DishesForm_vibrate__3DGiN\"};","const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst URL = \"https://frosty-wood-6558.getsandbox.com:443/dishes\";\n\nexport default (async function showResults(values) {\n    await sleep(500);\n    let result = {};\n    if (values.type === \"pizza\") {\n        result = {\n            name: values.name,\n            preparation_time: values.preparation_time,\n            type: values.type,\n            no_of_slices: parseInt(values.no_of_slices),\n            diameter: parseInt(values.diameter),\n        };\n    } else if (values.type === \"soup\") {\n        result = {\n            name: values.name,\n            preparation_time: values.preparation_time,\n            type: values.type,\n            spiciness_scale: parseInt(values.spiciness_scale),\n        };\n    } else if (values.type === \"sandwich\") {\n        result = {\n            name: values.name,\n            preparation_time: values.preparation_time,\n            type: values.type,\n            slices_of_bread: parseInt(values.slices_of_bread),\n        };\n    }\n    const requestOptions = {\n        method: \"POST\",\n        body: JSON.stringify(result, null, 2),\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    };\n    try {\n        const res = await fetch(URL, requestOptions);\n        const data = await res.json();\n        window.alert(`Response:\\n\\n${JSON.stringify(data, null, 2)}`);\n    } catch (error) {\n        window.alert(error);\n    }\n});\n","const renderField = ({\n    input,\n    label,\n    type,\n    step,\n    min,\n    max,\n    value,\n    defaultValue,\n    meta: { touched, error, warning },\n}) => (\n    <div>\n        <label>{label}</label>\n        <div>\n            <input\n                {...input}\n                placeholder={label}\n                step={step}\n                min={min}\n                max={max}\n                value={value}\n                defaultValue={defaultValue}\n                type={type}\n            />\n            {touched &&\n        ((error && <span style={{color: 'red'}}>{error}</span>) ||\n          (warning && <span>{warning}</span>))}\n        </div>\n    </div>\n);\n\nexport default renderField;\n","export default __webpack_public_path__ + \"static/media/pizza.17fedf7b.jpg\";","import React from \"react\";\nimport { Field } from \"redux-form\";\nimport renderField from \"../../renderField\";\nimport pizzaImg from '../../img/pizza.jpg'\n\nlet Pizza = () => {\n    return (\n        <>\n            <Field\n                name=\"no_of_slices\"\n                component={renderField}\n                type=\"number\"\n                min=\"1\"\n                placeholder=\"No of slicess\"\n                label=\"Number of slices\"\n            />\n            <Field\n                name=\"diameter\"\n                component={renderField}\n                type=\"number\"\n                step=\"0.1\"\n                min=\"23.0\"\n                max=\"50.0\"\n                placeholder=\"diameter\"\n                label=\"Diameter\"\n            />\n            <img src={pizzaImg} alt='pizza' style={{width: '200px'}}/>\n        </>\n    );\n};\n\nexport default Pizza;\n","export default __webpack_public_path__ + \"static/media/soup.d2d47de3.jpg\";","import React from \"react\";\nimport { Field } from \"redux-form\";\nimport renderField from \"../../renderField\";\nimport soupImg from \"../../img/soup.jpg\"\n\nlet Soup = () => {\n    return (\n        <div>\n            <Field\n                className=\"slider\"\n                name=\"spiciness_scale\"\n                id=\"spiciness_scale\"\n                component={renderField}\n                type=\"range\"\n                min=\"1\"\n                max=\"10\"\n                value=\"\"\n                defaultValue=\"-1\"\n                label=\"spiciness scale 1-10\"\n            />\n            <img src={soupImg} alt='soup' style={{width: '200px'}}/>\n        </div>\n    );\n};\n\nexport default Soup;\n","export default __webpack_public_path__ + \"static/media/sandwich.138ae38d.jpg\";","import React from \"react\";\nimport { Field } from \"redux-form\";\nimport renderField from \"../../renderField\";\nimport sandwichImg from \"../../img/sandwich.jpg\"\n\nlet Sandwich = () => {\n    return (\n        <div>\n            <Field\n                name=\"slices_of_bread\"\n                id=\"slices_of_bread\"\n                component={renderField}\n                type=\"number\"\n                min=\"1\"\n                max=\"10\"\n                label=\"slices of bread 1-10\"\n            />\n            <img src={sandwichImg} alt='sandwich' style={{width: '200px'}}/>\n        </div>\n    );\n};\n\nexport default Sandwich;\n","import React from 'react';\r\nimport styles from './renderDropDown.module.css';\r\nconst renderDropDownField = (formValues) => {\r\n\r\n    const { input, label, meta, options } = formValues;\r\n\r\n    const { touched, error } = meta;\r\n\r\n    return (\r\n        <div>\r\n            <label htmlFor={input.name}>{label}</label>\r\n            <select className={styles.select} {...input}>\r\n                {\r\n                    options.map((option) =>  <option key={option.name} value={option.value}>{option.name}</option>)\r\n                }\r\n            </select>\r\n            {(touched && error) ? <div style={{color: 'red'}}>{error}</div> : ''}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default renderDropDownField;","const validate = (values) => {\n    const errors = {};\n    if (!values.name) {\n        errors.name = \"Required\";\n    } else if (values.name.length > 15) {\n        errors.username = \"Must be 15 characters or less\";\n    }\n    if (!values.preparation_time) {\n        errors.preparation_time = \"Required\";\n    } else if (values.preparation_time === \"00:00:00\") {\n        errors.preparation_time = \"Choose preparation time\";\n    } else if (\n        parseInt(values.preparation_time.slice(3)) < 10 &&\n        parseInt(values.preparation_time.slice(1)) === 0\n    ) {\n        errors.preparation_time = \"Preparation time can't be under 10 minutes\";\n    }\n    if(!values.type || 'none' === values.type) {\n        errors.type = \"Please choose type of a dish\"\n    }\n    if (!values.no_of_slices) {\n        errors.no_of_slices = \"Required\";\n    } else if (isNaN(Number(values.no_of_slices))) {\n        errors.no_of_slices = \"Must be a number\";\n    } else if (Number(values.no_of_slices) < 4) {\n        errors.no_of_slices = \"Sorry, you must order at least 4 piecess\";\n    }\n    if (!values.diameter) {\n        errors.diameter = \"Required\";\n    } else if (values.diameter.max > 50.0) {\n        errors.diameter = \"Sorry, 50 is max value\";\n    }\n    if (!values.slices_of_bread) {\n        errors.slices_of_bread = \"Required\";\n    } else if (values.slices_of_bread.max > 10) {\n        errors.slices_of_bread = \"Sorry, 10 is max value\";\n    }\n    if (!values.spiciness_scale) {\n        errors.spiciness_scale = \"Choose spiciness scale 1-10\";\n    }\n\n    return errors;\n};\n\nexport default validate;\n","const warn = values => {\r\n    const errors = {}\r\n    if (values.spiciness_scale > 8) {\r\n      errors.spiciness_scale = 'Very spicy, order at your own risk'\r\n    }\r\n  \r\n    return errors\r\n  }\r\n  \r\n  export default warn","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm, formValueSelector, reset } from \"redux-form\";\nimport Pizza from \"../dish-types/Pizza\";\nimport Soup from \"../dish-types/Soup\";\nimport Sandwich from \"../dish-types/Sandwich\";\nimport renderDropDownField from \"../DropDown/renderDropDownField\";\nimport renderField from \"../../renderField\";\nimport validate from \"../../validate\";\nimport warn from \"../../warn\";\nimport styles from './DishesForm.module.css';\n\nlet DishesForm = (props) => {\n    const { handleSubmit, dishType, submitting, valid } = props;\n\n    const categories = [\n        {\n            value: 'none',\n            name: 'Dish Type', \n        },\n        {\n            value: 'pizza',\n            name: 'pizza',\n        },\n        {\n            value: 'soup',\n            name: 'soup',\n        },\n        {\n            value: 'sandwich',\n            name: 'sandwich',\n        },\n    ];\n\n    return (\n        <form onSubmit={handleSubmit} className={styles.form}>\n            <div>\n                <Field\n                    name=\"name\"\n                    component={renderField}\n                    type=\"text\"\n                    label=\"Name\"\n                />\n            </div>\n            <div>\n                <Field\n                    name=\"preparation_time\"\n                    component={renderField}\n                    type=\"time\"\n                    step=\"1\"\n                    defaultValue=\"00:00:00\"\n                    label=\"Preparation time\"\n                />\n            </div>\n\n                <label>Dish type</label>\n                    <Field name=\"type\" options={categories} component={renderDropDownField} />\n                <div>\n                {dishType === \"pizza\" && <Pizza />}\n                {dishType === \"soup\" && <Soup />}\n                {dishType === \"sandwich\" && <Sandwich />}\n            </div>\n            <div>\n                <button \n                disabled={!valid} \n                className={submitting ? `${styles.button} ${styles.success} ${styles.animate}` \n                : `${styles.button} ${styles.success}`} \n                type=\"submit\" >\n                    Submit\n                </button>\n            </div>\n        </form>\n    );\n};\n\nconst afterSubmit = (result, dispatch) => {\n    dispatch(reset('dishesForm'));\n}\n\nDishesForm = reduxForm({\n    form: \"dishesForm\",\n    onSubmitSuccess: afterSubmit,\n    validate,\n    warn,\n})(DishesForm);\n\nconst selector = formValueSelector(\"dishesForm\");\nDishesForm = connect((state) => {\n    const dishType = selector(state, \"type\");\n    return {\n        dishType,\n    };\n})(DishesForm);\n\nexport default DishesForm;\n","import { createStore, combineReducers } from \"redux\";\nimport { reducer as reduxFormReducer } from \"redux-form\";\n\nconst reducer = combineReducers({\n    form: reduxFormReducer,\n});\nconst store = createStore(reducer);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport sendOrder from \"./sendOrder\";\nimport DishesForm from \"./components/DishesForm/DishesForm\";\nimport store from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <DishesForm onSubmit={sendOrder} />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"renderDropDown_select__SX0kL\"};"],"sourceRoot":""}